Description: >
    Example infrastructure for static projects.

Parameters:

    ProjectSlug:
        Type: String
        Description: The slugified name of the project, e.g. dex.

    BuildS3Bucket:
        Type: String
        Description: The S3 bucket where builds will end up.

    CreateBuildS3Bucket:
        Type: String
        Description: Set this to false if the build S3 bucket has already been created.
        AllowedValues: [true, false]
        Default: false

    Domain:
        Type: String
        Description: The domain where the website will be hosted.

    WWWRedirect:
        Type: String
        Description: Whether to create a www-prefix domain and have it redirect to the `Domain`
        AllowedValues: [true, false]
        Default: true

    Route53ZoneId:
        Type: String
        Description: The ID of the Route 53 Zone of the domain.

    GitHubOAuthToken:
        Description: Create a token with 'repo' and 'admin:repo_hook' permissions here https://github.com/settings/tokens
        Type: String
        NoEcho: true

    GitHubUser:
        Description: GitHub username of the repository owner
        Type: String

    GitHubRepository:
        Description: Repository name that should be monitored for changes
        Type: String

    GitHubBranch:
        Description: GitHub branch to monitored
        Type: String
        Default: master

    RootCertARN:
        Description: The ARN of the root domain SSL certificate.
        Type: String

Conditions:
    DoWWWRedirect: !Equals [true, !Ref WWWRedirect]
    DoCreateBuildS3Bucket: !Equals [true, !Ref CreateBuildS3Bucket]

Resources:

    ######################
    ### BUILD & DEPLOY ###
    ######################
    BuildsStoreBucket:
        Type: AWS::S3::Bucket
        Condition: DoCreateBuildS3Bucket
        Properties:
            VersioningConfiguration:
                Status: Enabled
            AccessControl: BucketOwnerFullControl
            BucketName: !Sub ${BuildS3Bucket}

    CodeBuild:
        Type: AWS::CodeBuild::Project
        Properties:
            Name: !Ref ProjectSlug
            Description: !Sub Build project for ${ProjectSlug}
            ServiceRole: !Ref CodeBuildRole
            Source:
                Type: CODEPIPELINE
                BuildSpec: infra/build/buildspec.yml
            Environment:
                ComputeType: BUILD_GENERAL1_SMALL
                Image: aws/codebuild/nodejs:10.1.0
                Type: LINUX_CONTAINER
                EnvironmentVariables:
                    -
                        Name: ARTIFACT_S3_BUCKET
                        Value: !Sub ${BuildS3Bucket}
            Artifacts:
                Name: !Ref ProjectSlug
                Type: CODEPIPELINE

    CodePipeline:
        Type: AWS::CodePipeline::Pipeline
        Properties:
            Name: !Ref ProjectSlug
            RoleArn: !Sub ${CodePipelineRole.Arn}
            ArtifactStore:
                Type: S3
                Location: !Ref BuildS3Bucket
            Stages:
                -
                    Name: Source
                    Actions:
                        -
                            Name: GitHub
                            ActionTypeId:
                                Category: Source
                                Owner: ThirdParty
                                Version: 1
                                Provider: GitHub
                            OutputArtifacts:
                                -  Name: Source
                            Configuration:
                                Owner: !Ref GitHubUser
                                Repo: !Ref GitHubRepository
                                Branch: !Ref GitHubBranch
                                OAuthToken: !Ref GitHubOAuthToken
                -
                    Name: Build
                    Actions:
                        -
                            Name: CodeBuild
                            InputArtifacts:
                                - Name: Source
                            ActionTypeId:
                                Category: Build
                                Owner: AWS
                                Version: 1
                                Provider: CodeBuild
                            OutputArtifacts:
                                - Name: Built
                            Configuration:
                                ProjectName: !Ref CodeBuild

    ###############
    ### WEBSITE ###
    ###############

    # PRODUCTION

    # website S3 bucket
    S3Bucket:
        Type: AWS::S3::Bucket
        Properties:
            AccessControl: PublicRead
            BucketName: !Sub ${Domain}
            Tags:
            -
                Key: 'project'
                Value: !Sub ${ProjectSlug}
            WebsiteConfiguration:
                IndexDocument: index.html
                ErrorDocument: index.html

    # allow public read on website S3 bucket policy
    BucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref S3Bucket
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                    -
                        Sid: PublicReadForGetBucketObjects
                        Effect: Allow
                        Principal: '*'
                        Action: 's3:GetObject'
                        Resource: !Sub arn:aws:s3:::${S3Bucket}/*

    # Production CloudFront
    CloudFrontDistribution:
        Type: 'AWS::CloudFront::Distribution'
        DependsOn:
            - S3Bucket
        Properties:
            DistributionConfig:
                Enabled: true
                Aliases:
                    - !Sub ${Domain}
                DefaultRootObject: index.html
                PriceClass: PriceClass_All
                Origins:
                    -
                        DomainName: !Sub ${Domain}.s3-website.${AWS::Region}.amazonaws.com
                        Id: S3Origin
                        CustomOriginConfig:
                            HTTPPort: 80
                            HTTPSPort: 443
                            OriginProtocolPolicy: http-only
                DefaultCacheBehavior:
                    TargetOriginId: S3Origin
                    AllowedMethods:
                        - GET
                        - HEAD
                        - OPTIONS
                        - PUT
                        - PATCH
                        - POST
                        - DELETE
                    Compress: true
                    ForwardedValues:
                        QueryString: false
                        Cookies:
                            Forward: none
                    ViewerProtocolPolicy: redirect-to-https
                ViewerCertificate:
                    AcmCertificateArn: !Ref RootCertARN
                    SslSupportMethod: sni-only

    # WWW REDIRECT

    # WWW Redirect CloudFront
    WWWRedirectCloudFrontDistribution:
        Type: 'AWS::CloudFront::Distribution'
        Condition: DoWWWRedirect
        DependsOn:
            - WWWRedirectS3Bucket
        Properties:
            DistributionConfig:
                Enabled: true
                Aliases:
                    - !Sub www.${Domain}
                DefaultRootObject: index.html
                PriceClass: PriceClass_All
                Origins:
                    -
                        DomainName: !Sub www.${Domain}.s3-website.${AWS::Region}.amazonaws.com
                        Id: WWWRedirectS3Origin
                        CustomOriginConfig:
                            HTTPPort: 80
                            HTTPSPort: 443
                            OriginProtocolPolicy: http-only
                DefaultCacheBehavior:
                    TargetOriginId: WWWRedirectS3Origin
                    AllowedMethods:
                        - GET
                        - HEAD
                        - OPTIONS
                        - PUT
                        - PATCH
                        - POST
                        - DELETE
                    Compress: true
                    ForwardedValues:
                        QueryString: false
                        Cookies:
                            Forward: none
                    ViewerProtocolPolicy: redirect-to-https
                ViewerCertificate:
                    AcmCertificateArn: !Ref RootCertARN
                    SslSupportMethod: sni-only

    # WWW Redirect S3 bucket
    WWWRedirectS3Bucket:
        Type: AWS::S3::Bucket
        Condition: DoWWWRedirect
        Properties:
            AccessControl: PublicRead
            BucketName: !Sub www.${Domain}
            Tags:
            -
                Key: 'project'
                Value: !Sub ${ProjectSlug}
            WebsiteConfiguration:
                RedirectAllRequestsTo:
                    HostName: !Sub ${Domain}
                    Protocol: https

    # allow public read on redirect S3 bucket policy
    WWWRedirectBucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref WWWRedirectS3Bucket
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                    -
                        Sid: PublicReadForGetBucketObjects
                        Effect: Allow
                        Principal: '*'
                        Action: 's3:GetObject'
                        Resource: !Sub arn:aws:s3:::${WWWRedirectS3Bucket}/*

    # STAGING
    # website S3 bucket
    StagingS3Bucket:
        Type: AWS::S3::Bucket
        Properties:
            AccessControl: PublicRead
            BucketName: !Sub staging.${Domain}
            Tags:
            -
                Key: 'project'
                Value: !Sub ${ProjectSlug}
            WebsiteConfiguration:
                IndexDocument: index.html
                ErrorDocument: index.html

    # allow public read on staging website S3 bucket policy
    StagingBucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref StagingS3Bucket
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                    -
                        Sid: PublicReadForGetBucketObjects
                        Effect: Allow
                        Principal: '*'
                        Action: 's3:GetObject'
                        Resource: !Sub arn:aws:s3:::${StagingS3Bucket}/*

    # Production CloudFront
    StagingCloudFrontDistribution:
        Type: 'AWS::CloudFront::Distribution'
        DependsOn:
            - StagingS3Bucket
        Properties:
            DistributionConfig:
                Enabled: true
                Aliases:
                    - !Sub staging.${Domain}
                DefaultRootObject: index.html
                PriceClass: PriceClass_All
                Origins:
                    -
                        DomainName: !Sub staging.${Domain}.s3-website.${AWS::Region}.amazonaws.com
                        Id: StagingS3Origin
                        CustomOriginConfig:
                            HTTPPort: 80
                            HTTPSPort: 443
                            OriginProtocolPolicy: http-only
                DefaultCacheBehavior:
                    TargetOriginId: StagingS3Origin
                    AllowedMethods:
                        - GET
                        - HEAD
                        - OPTIONS
                        - PUT
                        - PATCH
                        - POST
                        - DELETE
                    Compress: true
                    ForwardedValues:
                        QueryString: false
                        Cookies:
                            Forward: none
                    ViewerProtocolPolicy: redirect-to-https
                ViewerCertificate:
                    AcmCertificateArn: !Ref RootCertARN
                    SslSupportMethod: sni-only

    DNS:
        Type: AWS::Route53::RecordSetGroup
        DependsOn:
            - CloudFrontDistribution
            - WWWRedirectCloudFrontDistribution
        Properties:
            HostedZoneId: !Sub ${Route53ZoneId}
            RecordSets:
            -
                Name: !Sub ${Domain}
                Type: A
                AliasTarget:
                    DNSName: !GetAtt CloudFrontDistribution.DomainName
                    HostedZoneId: Z2FDTNDATAQYW2 # AWS CF target (magic number)
            -
                Name: !Sub www.${Domain}
                Type: A
                AliasTarget:
                    DNSName: !GetAtt WWWRedirectCloudFrontDistribution.DomainName
                    HostedZoneId: Z2FDTNDATAQYW2 # AWS CF target (magic number)
            -
                Name: !Sub staging.${Domain}
                Type: A
                AliasTarget:
                    DNSName: !GetAtt StagingCloudFrontDistribution.DomainName
                    HostedZoneId: Z2FDTNDATAQYW2 # AWS CF target (magic number)

    #############
    ### ROLES ###
    #############
    CodeBuildRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${ProjectSlug}-CodeBuild
            AssumeRolePolicyDocument: |
                    {
                        "Statement": [{
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "codebuild.amazonaws.com"
                            }
                        }]
                    }
            Policies:
                -
                    PolicyName: !Sub ${ProjectSlug}-CodeBuild
                    PolicyDocument: !Sub |
                        {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Resource": [ "*" ],
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:s3:::${BuildsStoreBucket}/*"
                                    ],
                                    "Action": [
                                        "s3:GetObject",
                                        "s3:GetObjectVersion",
                                        "s3:PutObject"
                                    ]
                                }
                            ]
                        }

    CodePipelineRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${ProjectSlug}-CodePipeline
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "codepipeline.amazonaws.com"
                        }
                    }]
                }
            Policies:
                -
                    PolicyName: !Sub ${ProjectSlug}-CodePipeline
                    PolicyDocument: !Sub |
                        {
                            "Statement": [
                                {
                                    "Action": [ "s3:GetBucketVersioning" ],
                                    "Resource": [ "arn:aws:s3:::${BuildsStoreBucket}" ],
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "s3:PutObject",
                                        "s3:GetObject",
                                        "S3:GetObjectVersion"
                                    ],
                                    "Resource": [
                                        "arn:aws:s3:::${BuildsStoreBucket}/*"
                                    ],
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "codedeploy:CreateDeployment",
                                        "codedeploy:GetApplicationRevision",
                                        "codedeploy:GetDeployment",
                                        "codedeploy:GetDeploymentConfig",
                                        "codedeploy:RegisterApplicationRevision"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "cloudformation:CreateStack",
                                        "cloudformation:DeleteStack",
                                        "cloudformation:DescribeStacks",
                                        "cloudformation:UpdateStack",
                                        "cloudformation:CreateChangeSet",
                                        "cloudformation:DeleteChangeSet",
                                        "cloudformation:DescribeChangeSet",
                                        "cloudformation:ExecuteChangeSet",
                                        "cloudformation:SetStackPolicy",
                                        "cloudformation:ValidateTemplate",
                                        "iam:PassRole"
                                    ],
                                    "Resource": [
                                      "arn:aws:iam::${AWS::AccountId}:role/${ProjectSlug}-CloudFormation-${AWS::Region}",
                                      "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ProjectSlug}-staging/*",
                                      "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ProjectSlug}-production/*"
                                      ],
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "codebuild:BatchGetBuilds",
                                        "codebuild:StartBuild"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                }
                            ]
                        }
